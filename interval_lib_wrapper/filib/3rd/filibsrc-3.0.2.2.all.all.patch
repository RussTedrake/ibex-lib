diff --git a/filibsrc-3.0.2.2/ieee/primitive.cpp b/filibsrc-3.0.2.2/ieee/primitive.cpp
index ee7067b..618b58d 100644
--- a/filibsrc-3.0.2.2/ieee/primitive.cpp
+++ b/filibsrc-3.0.2.2/ieee/primitive.cpp
@@ -281,7 +281,7 @@ namespace filib
 	float const primitive::one_fsucc   = primitive::composef(0,127,1);
 
 	template <>
-	double constructFromBitSet<double>(std::istream & in) throw(interval_io_exception)
+	double constructFromBitSet<double>(std::istream & in)
 	{
 		unsigned char signBit[1];
 		unsigned char expBits[11];
@@ -321,7 +321,7 @@ namespace filib
 	}
 
 	template <>
-	float constructFromBitSet<float>(std::istream & in) throw(interval_io_exception)
+	float constructFromBitSet<float>(std::istream & in)
 	{
 		unsigned char signBit[1];
 		unsigned char expBits[8];
@@ -354,7 +354,7 @@ namespace filib
 	}
 
 	template <>
-	double constructFromHexSet<double>(std::istream & in) throw(interval_io_exception)
+	double constructFromHexSet<double>(std::istream & in)
 	{
 		unsigned char signHex[1];
 		unsigned char expHex[3];
@@ -400,7 +400,7 @@ namespace filib
 	}
 
 	template <>
-	float constructFromHexSet<float>(std::istream & in) throw(interval_io_exception)
+	float constructFromHexSet<float>(std::istream & in)
 	{
 		unsigned char signHex[1];
 		unsigned char expHex[2];
@@ -445,7 +445,6 @@ namespace filib
 	}
 
 	static double checkedToDouble(std::string const & s)
-	throw(interval_io_exception)
 	{
 		char * endptr = 0;
 		char const * nptr = s.c_str();
@@ -458,20 +457,17 @@ namespace filib
 	}
 	template <>
 	double inferFromString<double,false>(std::string const & s)
-	throw(interval_io_exception)
 	{
 		return primitive::basic_pred(checkedToDouble(s)) ;
 	}
 	template <>
 	double inferFromString<double,true>(std::string const & s)
-	throw(interval_io_exception)
 	{
 		return primitive::basic_succ(checkedToDouble(s)) ;
 
 	}
 	template <>
 	float inferFromString<float,false>(std::string const & s)
-	throw(interval_io_exception)
 	{
 		float tval = static_cast<float>(checkedToDouble(s));
 		
@@ -484,7 +480,6 @@ namespace filib
 	}
 	template <>
 	float inferFromString<float,true>(std::string const & s)
-	throw(interval_io_exception)
 	{
 		float tval = static_cast<float>(checkedToDouble(s));
 		
@@ -499,7 +494,7 @@ namespace filib
 	void readBitSet(
 		std::istream & in, 
 		unsigned int n0,
-		unsigned char * s) throw(interval_io_exception)
+		unsigned char * s)
 	{
 		size_t pos = 0;
 		size_t n = n0;
@@ -529,7 +524,7 @@ namespace filib
 	void readHexSet(
 		std::istream & in, 
 		unsigned int n0,
-		unsigned char * s) throw(interval_io_exception)
+		unsigned char * s)
 	{
 		size_t pos = 0;
 		size_t n = n0;
@@ -589,7 +584,7 @@ namespace filib
 		}
 	}
 
-	void readChar(std::istream& in, char c0) throw(interval_io_exception)
+	void readChar(std::istream& in, char c0)
 	{
 		char c = in.get();
 		
@@ -602,7 +597,7 @@ namespace filib
 	}
 
 	template <>
-	float constructFromBitSet<float>(std::string & in) throw(interval_io_exception)
+	float constructFromBitSet<float>(std::string & in)
 	{
 		#if defined(__GNUC__) && __GNUC__ < 3
 		std::istrstream istr(in.c_str());
@@ -612,7 +607,7 @@ namespace filib
 		return constructFromBitSet<float>(istr);
 	}
 	template <>
-	double constructFromBitSet<double>(std::string & in) throw(interval_io_exception)
+	double constructFromBitSet<double>(std::string & in)
 	{
 		#if defined(__GNUC__) && __GNUC__ < 3
 		std::istrstream istr(in.c_str());
@@ -623,7 +618,7 @@ namespace filib
 	}
 
 	template <>
-	float constructFromBitSet<float>(char const * in) throw(interval_io_exception)
+	float constructFromBitSet<float>(char const * in)
 	{
 		#if defined(__GNUC__) && __GNUC__ < 3
 		std::istrstream istr(in);
@@ -633,7 +628,7 @@ namespace filib
 		return constructFromBitSet<float>(istr);
 	}
 	template <>
-	double constructFromBitSet<double>(char const * in) throw(interval_io_exception)
+	double constructFromBitSet<double>(char const * in)
 	{
 		#if defined(__GNUC__) && __GNUC__ < 3
 		std::istrstream istr(in);
@@ -644,7 +639,7 @@ namespace filib
 	}
 
 	template <>
-	float constructFromHexSet<float>(std::string & in) throw(interval_io_exception)
+	float constructFromHexSet<float>(std::string & in)
 	{
 		#if defined(__GNUC__) && __GNUC__ < 3
 		std::istrstream istr(in.c_str());
@@ -654,7 +649,7 @@ namespace filib
 		return constructFromHexSet<float>(istr);
 	}
 	template <>
-	double constructFromHexSet<double>(std::string & in) throw(interval_io_exception)
+	double constructFromHexSet<double>(std::string & in)
 	{
 		#if defined(__GNUC__) && __GNUC__ < 3
 		std::istrstream istr(in.c_str());
@@ -665,7 +660,7 @@ namespace filib
 	}
 
 	template <>
-	float constructFromHexSet<float>(char const * in) throw(interval_io_exception)
+	float constructFromHexSet<float>(char const * in)
 	{
 		#if defined(__GNUC__) && __GNUC__ < 3
 		std::istrstream istr(in);
@@ -675,7 +670,7 @@ namespace filib
 		return constructFromHexSet<float>(istr);
 	}
 	template <>
-	double constructFromHexSet<double>(char const * in) throw(interval_io_exception)
+	double constructFromHexSet<double>(char const * in)
 	{
 		#if defined(__GNUC__) && __GNUC__ < 3
 		std::istrstream istr(in);
diff --git a/filibsrc-3.0.2.2/ieee/primitive.hpp b/filibsrc-3.0.2.2/ieee/primitive.hpp
index 567b39a..a891746 100644
--- a/filibsrc-3.0.2.2/ieee/primitive.hpp
+++ b/filibsrc-3.0.2.2/ieee/primitive.hpp
@@ -49,10 +49,10 @@ namespace filib
 		std::string desc;
 		
 		public:
-		interval_io_exception(std::string const & rdesc) throw()
+		interval_io_exception(std::string const & rdesc) noexcept(true)
 		: desc(rdesc) {}
-		virtual ~interval_io_exception() throw() {};
-		virtual char const * what() const throw()
+		virtual ~interval_io_exception() noexcept(true) {};
+		virtual char const * what() const noexcept(true)
 		{ return desc.c_str(); }
 	};
 
@@ -139,7 +139,7 @@ namespace filib
 	{
 		public:
 		
-		static inline double const & MIN()
+		static inline double const & MIN_VALUE()
 		{
 			return min;
 		}
@@ -149,7 +149,7 @@ namespace filib
 			return minNorm;
 		}
   
-		static inline double const & MAX()
+		static inline double const & MAX_VALUE()
 		{
 			return max;
 		}
@@ -541,7 +541,7 @@ namespace filib
 					 * special case: positive infinity
 					 **/
 					if (f.ieee.expo == 2047)
-						return MAX();
+						return MAX_VALUE();
 					/**
 					 * special case 2: positive powers of 2
 					 **/
@@ -575,7 +575,7 @@ namespace filib
 					 * special case: negative infinity
 					 **/
 					if (f.ieee.expo == 2047)
-						return -MAX();
+						return -MAX_VALUE();
 					/**
 					 * special case: positive powers of 2
 					 **/
@@ -659,50 +659,50 @@ namespace filib
 #elif defined(_MSC_VER) && defined(FILIB_BUILD_DLL) && ! defined(FILIB_DLL)
 	__declspec(dllimport)
 #endif
-	void readBitSet(std::istream & in, unsigned int n0, unsigned char * a) throw(interval_io_exception);
+	void readBitSet(std::istream & in, unsigned int n0, unsigned char * a);
 
 #if defined(_MSC_VER) && defined(FILIB_BUILD_DLL) && defined(FILIB_DLL)
 	__declspec(dllexport)
 #elif defined(_MSC_VER) && defined(FILIB_BUILD_DLL) && ! defined(FILIB_DLL)
 	__declspec(dllimport)
 #endif
-	void readHexSet(std::istream & in, unsigned int n0, unsigned char * a) throw(interval_io_exception);
+	void readHexSet(std::istream & in, unsigned int n0, unsigned char * a);
 
 #if defined(_MSC_VER) && defined(FILIB_BUILD_DLL) && defined(FILIB_DLL)
 	__declspec(dllexport)
 #elif defined(_MSC_VER) && defined(FILIB_BUILD_DLL) && ! defined(FILIB_DLL)
 	__declspec(dllimport)
 #endif
-	void readChar(std::istream& in, char c0) throw(interval_io_exception);
+	void readChar(std::istream& in, char c0);
 
 	template <typename N>
-	N constructFromBitSet(std::istream & in) throw(interval_io_exception)
+	N constructFromBitSet(std::istream &)
 	{
 		throw interval_io_exception("constructFromBitSet() called for unsupported type");
 	}
 	template <typename N>
-	N constructFromBitSet(std::string & in) throw(interval_io_exception)
+	N constructFromBitSet(std::string &)
 	{
 		throw interval_io_exception("constructFromBitSet() called for unsupported type");
 	}
 	template <typename N>
-	N constructFromBitSet(char const * in) throw(interval_io_exception)
+	N constructFromBitSet(char const *)
 	{
 		throw interval_io_exception("constructFromBitSet() called for unsupported type");
 	}
 
 	template <typename N>
-	N constructFromHexSet(std::istream & in) throw(interval_io_exception)
+	N constructFromHexSet(std::istream &)
 	{
 		throw interval_io_exception("constructFromHexSet() called for unsupported type");
 	}
 	template <typename N>
-	N constructFromHexSet(std::string & in) throw(interval_io_exception)
+	N constructFromHexSet(std::string &)
 	{
 		throw interval_io_exception("constructFromHexSet() called for unsupported type");
 	}
 	template <typename N>
-	N constructFromHexSet(char const * in) throw(interval_io_exception)
+	N constructFromHexSet(char const *)
 	{
 		throw interval_io_exception("constructFromHexSet() called for unsupported type");
 	}
@@ -736,61 +736,61 @@ namespace filib
 #elif defined(_MSC_VER) && defined(FILIB_BUILD_DLL) && ! defined(FILIB_DLL)
 	__declspec(dllimport)
 #endif
-	double constructFromBitSet<double>(std::istream & in) throw(interval_io_exception);
+	double constructFromBitSet<double>(std::istream & in);
 	template <>
 #if defined(_MSC_VER) && defined(FILIB_BUILD_DLL) && defined(FILIB_DLL)
 	__declspec(dllexport)
 #elif defined(_MSC_VER) && defined(FILIB_BUILD_DLL) && ! defined(FILIB_DLL)
 	__declspec(dllimport)
 #endif
-	float constructFromBitSet<float>(std::istream & in) throw(interval_io_exception);
+	float constructFromBitSet<float>(std::istream & in);
 	template <>
 #if defined(_MSC_VER) && defined(FILIB_BUILD_DLL) && defined(FILIB_DLL)
 	__declspec(dllexport)
 #elif defined(_MSC_VER) && defined(FILIB_BUILD_DLL) && ! defined(FILIB_DLL)
 	__declspec(dllimport)
 #endif
-	float constructFromBitSet<float>(std::string & in) throw(interval_io_exception);
+	float constructFromBitSet<float>(std::string & in);
 	template <>
 #if defined(_MSC_VER) && defined(FILIB_BUILD_DLL) && defined(FILIB_DLL)
 	__declspec(dllexport)
 #elif defined(_MSC_VER) && defined(FILIB_BUILD_DLL) && ! defined(FILIB_DLL)
 	__declspec(dllimport)
 #endif
-	double constructFromBitSet<double>(std::string & in) throw(interval_io_exception);
+	double constructFromBitSet<double>(std::string & in);
 	template <>
 #if defined(_MSC_VER) && defined(FILIB_BUILD_DLL) && defined(FILIB_DLL)
 	__declspec(dllexport)
 #elif defined(_MSC_VER) && defined(FILIB_BUILD_DLL) && ! defined(FILIB_DLL)
 	__declspec(dllimport)
 #endif
-	float constructFromBitSet<float>(char const * in) throw(interval_io_exception);
+	float constructFromBitSet<float>(char const * in);
 	template <>
 #if defined(_MSC_VER) && defined(FILIB_BUILD_DLL) && defined(FILIB_DLL)
 	__declspec(dllexport)
 #elif defined(_MSC_VER) && defined(FILIB_BUILD_DLL) && ! defined(FILIB_DLL)
 	__declspec(dllimport)
 #endif
-	double constructFromBitSet<double>(char const * in) throw(interval_io_exception);
+	double constructFromBitSet<double>(char const * in);
 
 	template <>
-	double constructFromHexSet<double>(std::istream & in) throw(interval_io_exception);
+	double constructFromHexSet<double>(std::istream & in);
 	template <>
-	float constructFromHexSet<float>(std::istream & in) throw(interval_io_exception);
+	float constructFromHexSet<float>(std::istream & in);
 	template <>
-	float constructFromHexSet<float>(std::string & in) throw(interval_io_exception);
+	float constructFromHexSet<float>(std::string & in);
 	template <>
-	double constructFromHexSet<double>(std::string & in) throw(interval_io_exception);
+	double constructFromHexSet<double>(std::string & in);
 	template <>
-	float constructFromHexSet<float>(char const * in) throw(interval_io_exception);
+	float constructFromHexSet<float>(char const * in);
 	template <>
-	double constructFromHexSet<double>(char const * in) throw(interval_io_exception);
+	double constructFromHexSet<double>(char const * in);
 
 	template<>
 	int whitespace<char>::isSpace(int arg);
 
 	template <typename N, bool upDo>
-	N inferFromString(std::string const &) throw(interval_io_exception)
+	N inferFromString(std::string const &)
 	{
 		throw interval_io_exception("inferFromString() called for unsupported type");
 	}
@@ -800,32 +800,28 @@ namespace filib
 #elif defined(_MSC_VER) && defined(FILIB_BUILD_DLL) && ! defined(FILIB_DLL)
 	__declspec(dllimport)
 #endif	
-	double inferFromString<double,false>(std::string const & )
-	throw(interval_io_exception);
+	double inferFromString<double,false>(std::string const & );
 	template <>
 #if defined(_MSC_VER) && defined(FILIB_BUILD_DLL) && defined(FILIB_DLL)
 	__declspec(dllexport)
 #elif defined(_MSC_VER) && defined(FILIB_BUILD_DLL) && ! defined(FILIB_DLL)
 	__declspec(dllimport)
 #endif	
-	double inferFromString<double,true>(std::string const & )
-	throw(interval_io_exception);
+	double inferFromString<double,true>(std::string const & );
 	template <>
 #if defined(_MSC_VER) && defined(FILIB_BUILD_DLL) && defined(FILIB_DLL)
 	__declspec(dllexport)
 #elif defined(_MSC_VER) && defined(FILIB_BUILD_DLL) && ! defined(FILIB_DLL)
 	__declspec(dllimport)
 #endif	
-	float inferFromString<float,false>(std::string const & )
-	throw(interval_io_exception);
+	float inferFromString<float,false>(std::string const & );
 	template <>
 #if defined(_MSC_VER) && defined(FILIB_BUILD_DLL) && defined(FILIB_DLL)
 	__declspec(dllexport)
 #elif defined(_MSC_VER) && defined(FILIB_BUILD_DLL) && ! defined(FILIB_DLL)
 	__declspec(dllimport)
 #endif	
-	float inferFromString<float,true>(std::string const & )
-	throw(interval_io_exception);
+	float inferFromString<float,true>(std::string const & );
 } // namespace filib
 
 #endif // PRIMITIVE
diff --git a/filibsrc-3.0.2.2/interval/interval.hpp b/filibsrc-3.0.2.2/interval/interval.hpp
index c745bee..fc644b3 100755
--- a/filibsrc-3.0.2.2/interval/interval.hpp
+++ b/filibsrc-3.0.2.2/interval/interval.hpp
@@ -380,7 +380,6 @@ namespace filib
 	std::istream & operator >>(
 		std::istream & out,
 		interval<N,K,E> & a)
-	throw(interval_io_exception)
 	;
 
 	/**
@@ -627,8 +626,7 @@ namespace filib
 				N const & rl, N const & ru, char const &);
 
 			inline interval(
-				std::string const & infs, std::string const & sups)
-			throw(interval_io_exception);
+				std::string const & infs, std::string const & sups);
 
 			/**
 			 check for infinity (?)
@@ -657,12 +655,12 @@ namespace filib
 			/**
 			 copy constructor
 			 */
-			inline interval(interval<N,K,E> const & o);
+			inline interval(interval<N,K,E> const & o) noexcept;
 
 			/**
 			 destructor
 			 */
-			inline ~interval();
+			inline ~interval() noexcept;
 
 			/**
 			 assignment operator
@@ -1210,10 +1208,8 @@ namespace filib
 			 */
 			inline N amax() const;
 
-			static interval<N,K,E> readBitImage(std::istream &) 
-				throw(interval_io_exception);
-			static interval<N,K,E> readHexImage(std::istream &) 
-				throw(interval_io_exception);
+			static interval<N,K,E> readBitImage(std::istream &);
+			static interval<N,K,E> readHexImage(std::istream &);
 	};
 
 	template <typename N, rounding_strategy K, interval_mode E>
diff --git a/filibsrc-3.0.2.2/interval/interval.icc b/filibsrc-3.0.2.2/interval/interval.icc
index 0b38768..3710aa6 100755
--- a/filibsrc-3.0.2.2/interval/interval.icc
+++ b/filibsrc-3.0.2.2/interval/interval.icc
@@ -74,7 +74,7 @@ namespace filib
 	template <typename N,rounding_strategy K,interval_mode E>
 	inline interval<N,K,E>::interval(
 		std::string const & infs, std::string const & sups
-	) throw(interval_io_exception)
+	)
 		: 
 		INF(inferFromString<N,false>(infs)),
 		SUP(inferFromString<N,true> (sups))
@@ -169,7 +169,7 @@ namespace filib
 	 * copy constructor
 	 **/
 	template <typename N, rounding_strategy K, interval_mode E>
-	inline interval<N,K,E>::interval(interval<N,K,E> const & o)
+	inline interval<N,K,E>::interval(interval<N,K,E> const & o) noexcept
 	: INF(o.INF), SUP(o.SUP)
 	{
 	}
@@ -178,7 +178,7 @@ namespace filib
 	 * destructor
 	 **/
 	template <typename N, rounding_strategy K, interval_mode E>
-	inline interval<N,K,E>::~interval() {}
+	inline interval<N,K,E>::~interval() noexcept {}
 
 	/**
 	 * assignment operator
@@ -723,7 +723,7 @@ namespace filib
 	bool interval<N,K,E>::interior(interval<N,K,E> const & a) const
 	{
 		if ( E )
-			return a.INF < INF && SUP < a.SUP  || isEmpty();
+			return (a.INF < INF && SUP < a.SUP)  || isEmpty();
 		else
 			return a.INF < INF && SUP < a.SUP;
 	}
@@ -1157,7 +1157,6 @@ namespace filib
 
 	template<typename N, rounding_strategy K, interval_mode E>
 	interval<N,K,E> interval<N,K,E>::readBitImage(std::istream & in)
-		throw(interval_io_exception)
 	{
 		eatWS< whitespace<char> >(in);
 
@@ -1176,7 +1175,6 @@ namespace filib
 
 	template<typename N, rounding_strategy K, interval_mode E>
 	interval<N,K,E> interval<N,K,E>::readHexImage(std::istream & in)
-		throw(interval_io_exception)
 	{
 		eatWS< whitespace<char> >(in);
 
@@ -1195,7 +1193,6 @@ namespace filib
 
 	template <typename N, rounding_strategy K, interval_mode E>
 	std::istream &operator >>(std::istream &is, interval<N,K,E> &x)
-	throw(interval_io_exception)
 	{
 		N inf, sup;
 		std::string s;
diff --git a/filibsrc-3.0.2.2/interval/interval_arith.icc b/filibsrc-3.0.2.2/interval/interval_arith.icc
index 54d57f8..2c9680f 100755
--- a/filibsrc-3.0.2.2/interval/interval_arith.icc
+++ b/filibsrc-3.0.2.2/interval/interval_arith.icc
@@ -214,8 +214,8 @@
 				else
 				{
 					if (
-						isInfinite()   && ! a.isEmpty() ||
-						a.isInfinite() && !   isEmpty()
+						(isInfinite()   && ! a.isEmpty()) ||
+						(a.isInfinite() && !   isEmpty())
 					)
 					{
 						*this = ENTIRE();
diff --git a/filibsrc-3.0.2.2/interval/stdfun/filib_consts.hpp b/filibsrc-3.0.2.2/interval/stdfun/filib_consts.hpp
index dd06ace..4bdba86 100755
--- a/filibsrc-3.0.2.2/interval/stdfun/filib_consts.hpp
+++ b/filibsrc-3.0.2.2/interval/stdfun/filib_consts.hpp
@@ -716,6 +716,115 @@ namespace filib
 		static N const q_at3i;
 	};
 
+        template<> double const filib_consts<double>::q_exem;
+        template<> double const filib_consts<double>::q_exep;
+        template<> double const filib_consts<double>::q_exmm;
+        template<> double const filib_consts<double>::q_exmp;
+        template<> double const filib_consts<double>::q_logm;
+        template<> double const filib_consts<double>::q_logp;
+        template<> double const filib_consts<double>::q_lgpm;
+        template<> double const filib_consts<double>::q_lgpp;
+        template<> double const filib_consts<double>::q_sqtm;
+        template<> double const filib_consts<double>::q_sqtp;
+        template<> double const filib_consts<double>::q_snhm;
+        template<> double const filib_consts<double>::q_snhp;
+        template<> double const filib_consts<double>::q_cshm;
+        template<> double const filib_consts<double>::q_cshp;
+        template<> double const filib_consts<double>::q_cthm;
+        template<> double const filib_consts<double>::q_cthp;
+        template<> double const filib_consts<double>::q_tnhm;
+        template<> double const filib_consts<double>::q_tnhp;
+        template<> double const filib_consts<double>::q_asnm;
+        template<> double const filib_consts<double>::q_asnp;
+        template<> double const filib_consts<double>::q_acsm;
+        template<> double const filib_consts<double>::q_acsp;
+        template<> double const filib_consts<double>::q_actm;
+        template<> double const filib_consts<double>::q_actp;
+        template<> double const filib_consts<double>::q_atnm;
+        template<> double const filib_consts<double>::q_atnp;
+        template<> double const filib_consts<double>::q_csnm;
+        template<> double const filib_consts<double>::q_csnp;
+        template<> double const filib_consts<double>::q_cctm;
+        template<> double const filib_consts<double>::q_cctp;
+        template<> double const filib_consts<double>::q_ctnm;
+        template<> double const filib_consts<double>::q_ctnp;
+        template<> double const filib_consts<double>::q_sinm;
+        template<> double const filib_consts<double>::q_sinp;
+        template<> double const filib_consts<double>::q_cosm;
+        template<> double const filib_consts<double>::q_cosp;
+        template<> double const filib_consts<double>::q_cotm;
+        template<> double const filib_consts<double>::q_cotp;
+        template<> double const filib_consts<double>::q_tanm;
+        template<> double const filib_consts<double>::q_tanp;
+        template<> double const filib_consts<double>::q_lg2m;
+        template<> double const filib_consts<double>::q_lg2p;
+        template<> double const filib_consts<double>::q_l10m;
+        template<> double const filib_consts<double>::q_l10p;
+        template<> double const filib_consts<double>::q_e2em;
+        template<> double const filib_consts<double>::q_e2ep;
+        template<> double const filib_consts<double>::q_e10m;
+        template<> double const filib_consts<double>::q_e10p;
+        template<> double const filib_consts<double>::q_pi;
+        template<> double const filib_consts<double>::q_piha;
+        template<> double const filib_consts<double>::q_atnt;
+        template<> double const filib_consts<double>::q_ccsm;
+        template<> double const filib_consts<double>::q_ccsp;
+        template<> double const filib_consts<double>::q_minr;
+        template<> double const filib_consts<double>::q_mine;
+        template<> double const filib_consts<double>::q_sqra;
+        template<> double const filib_consts<double>::q_ctht;
+        template<> double const filib_consts<double>::q_ln2h;
+        template<> double const filib_consts<double>::q_l10i;
+        template<> double const filib_consts<double>::q_l2i;
+        template<> double const filib_consts<double>::q_l10;
+        template<> double const filib_consts<double>::q_l2;
+        template<> double const filib_consts<double>::q_p2h;
+        template<> double const filib_consts<double>::q_p2mh;
+        template<> double const filib_consts<double>::q_pi2i;
+        template<> double const filib_consts<double>::q_pi2d;
+        template<> double const filib_consts<double>::q_pi2u;
+        template<> double const filib_consts<double>::q_ext1;
+        template<> double const filib_consts<double>::q_ext2;
+        template<> double const filib_consts<double>::q_ex2a;
+        template<> double const filib_consts<double>::q_ex2b;
+        template<> double const filib_consts<double>::q_ex2c;
+        template<> double const filib_consts<double>::q_ext3;
+        template<> double const filib_consts<double>::q_ext4;
+        template<> double const filib_consts<double>::q_ext5;
+        template<> double const filib_consts<double>::q_extm;
+        template<> double const filib_consts<double>::q_extn;
+        template<> double const filib_consts<double>::q_exil;
+        template<> double const filib_consts<double>::q_exl1;
+        template<> double const filib_consts<double>::q_exl2;
+        template<> double const filib_consts<double>::q_e10i;
+        template<> double const filib_consts<double>::q_e1l1;
+        template<> double const filib_consts<double>::q_e1l2;
+        template<> double const filib_consts<double>::q_lgt1;
+        template<> double const filib_consts<double>::q_lgt2;
+        template<> double const filib_consts<double>::q_lgt3;
+        template<> double const filib_consts<double>::q_lgt4;
+        template<> double const filib_consts<double>::q_lgt5;
+        template<> double const filib_consts<double>::q_lgt6;
+        template<> double const filib_consts<double>::q_at3i;
+        template<> double const filib_consts<double>::q_atna[7];
+        template<> double const filib_consts<double>::q_atnb[8];
+        template<> double const filib_consts<double>::q_atnc[7];
+        template<> double const filib_consts<double>::q_atnd[6];
+        template<> double const filib_consts<double>::q_pih[7];
+        template<> double const filib_consts<double>::q_pi2p[3];
+        template<> double const filib_consts<double>::q_exa[5];
+        template<> double const filib_consts<double>::q_exb[9];
+        template<> double const filib_consts<double>::q_exc[7];
+        template<> double const filib_consts<double>::q_exd[7];
+        template<> double const filib_consts<double>::q_exld[32];
+        template<> double const filib_consts<double>::q_extl[32];
+        template<> double const filib_consts<double>::q_lgb[2];
+        template<> double const filib_consts<double>::q_lgc[4];
+        template<> double const filib_consts<double>::q_lgld[129];
+        template<> double const filib_consts<double>::q_lgtl[129];
+        template<> double const filib_consts<double>::q_sinc[6];
+        template<> double const filib_consts<double>::q_sins[6];
+        template<> double const filib_consts<double>::q_sint[5];
 }
 
 #endif
diff --git a/filibsrc-3.0.2.2/interval/stdfun/interval/log.icc b/filibsrc-3.0.2.2/interval/stdfun/interval/log.icc
index 579732d..c482534 100755
--- a/filibsrc-3.0.2.2/interval/stdfun/interval/log.icc
+++ b/filibsrc-3.0.2.2/interval/stdfun/interval/log.icc
@@ -85,17 +85,16 @@ namespace filib
 			else
 				rinf*=filib_consts<double>::q_logp;
 
-				if (E && ( x.sup() == fp_traits<double,K>::infinity() ) )
-					rsup = fp_traits<double,K>::infinity();
-				else
-				{
-					rsup=q_log<K,E>(x.sup());
-
+			if (E && ( x.sup() == fp_traits<double,K>::infinity() ) )
+				rsup = fp_traits<double,K>::infinity();
+			else
+			{
+				rsup=q_log<K,E>(x.sup());
 					if (rsup>=0)
-						rsup*=filib_consts<double>::q_logp;
-					else
-						rsup*=filib_consts<double>::q_logm;
-				}
+					rsup*=filib_consts<double>::q_logp;
+				else
+					rsup*=filib_consts<double>::q_logm;
+			}
 	
 			if ( E )
 			{
diff --git a/filibsrc-3.0.2.2/interval/stdfun/interval/log10.icc b/filibsrc-3.0.2.2/interval/stdfun/interval/log10.icc
index d4e6e81..40c1741 100755
--- a/filibsrc-3.0.2.2/interval/stdfun/interval/log10.icc
+++ b/filibsrc-3.0.2.2/interval/stdfun/interval/log10.icc
@@ -87,25 +87,25 @@ namespace filib
 			else
 				rinf*=filib_consts<double>::q_l10p;
 
-				if (E && ( x.sup() == fp_traits<double,K>::infinity() ) )
-					rsup = fp_traits<double,K>::infinity();
+			if (E && ( x.sup() == fp_traits<double,K>::infinity() ) )
+				rsup = fp_traits<double,K>::infinity();
+			else
+			{
+				rsup=q_lg10<K,E>(x.sup());
+
+				if (rsup>=0)
+					rsup*=filib_consts<double>::q_l10p;
 				else
-				{
-					rsup=q_lg10<K,E>(x.sup());
+					rsup*=filib_consts<double>::q_l10m;
+			}
 
-					if (rsup>=0)
-						rsup*=filib_consts<double>::q_l10p;
-					else
-						rsup*=filib_consts<double>::q_l10m;
-				}
-    
-				if ( E )
-				{
-					if (fp_traits<double,K>::IsNaN(rinf))
-						rinf = fp_traits<double,K>::ninfinity();
-					if (fp_traits<double,K>::IsNaN(rsup))
-						rsup = fp_traits<double,K>::infinity();
-				}
+			if ( E )
+			{
+				if (fp_traits<double,K>::IsNaN(rinf))
+					rinf = fp_traits<double,K>::ninfinity();
+				if (fp_traits<double,K>::IsNaN(rsup))
+					rsup = fp_traits<double,K>::infinity();
+			}
 		}   
 
 		return interval<double,K,E>(rinf,rsup);
diff --git a/filibsrc-3.0.2.2/interval/stdfun/interval/log1p.icc b/filibsrc-3.0.2.2/interval/stdfun/interval/log1p.icc
index 04c206a..66a667b 100755
--- a/filibsrc-3.0.2.2/interval/stdfun/interval/log1p.icc
+++ b/filibsrc-3.0.2.2/interval/stdfun/interval/log1p.icc
@@ -88,17 +88,17 @@ namespace filib
 			else
 				rinf*=filib_consts<double>::q_lgpp;
     
-				if (E && (x.sup() == fp_traits<double,K>::infinity() ) )
-					rsup = fp_traits<double,K>::infinity();
-				else
-				{
-					rsup=q_lg1p<K,E>(x.sup());
+			if (E && (x.sup() == fp_traits<double,K>::infinity() ) )
+				rsup = fp_traits<double,K>::infinity();
+			else
+			{
+				rsup=q_lg1p<K,E>(x.sup());
 
-					if (rsup>=0)
-						rsup*=filib_consts<double>::q_lgpp;
-					else
-						rsup*=filib_consts<double>::q_lgpm;
-				}
+				if (rsup>=0)
+					rsup*=filib_consts<double>::q_lgpp;
+				else
+					rsup*=filib_consts<double>::q_lgpm;
+			}
 
 			if ( E )
 			{
diff --git a/filibsrc-3.0.2.2/interval/stdfun/interval/log2.icc b/filibsrc-3.0.2.2/interval/stdfun/interval/log2.icc
index eac51d3..6a7bfed 100755
--- a/filibsrc-3.0.2.2/interval/stdfun/interval/log2.icc
+++ b/filibsrc-3.0.2.2/interval/stdfun/interval/log2.icc
@@ -91,22 +91,22 @@ namespace filib
 			else
 				rinf*=filib_consts<double>::q_lg2p;
 
-				if (E && x.sup() == fp_traits<double,K>::infinity())
-					rsup = fp_traits<double,K>::infinity();
+			if (E && x.sup() == fp_traits<double,K>::infinity())
+				rsup = fp_traits<double,K>::infinity();
+			else
+			{
+				rsup=q_log2<K,E>(x.sup());
+
+				if (rsup>=0)
+					rsup*=filib_consts<double>::q_lg2p;
 				else
-				{
-					rsup=q_log2<K,E>(x.sup());
+					rsup*=filib_consts<double>::q_lg2m;
+			}
 
-					if (rsup>=0)
-						rsup*=filib_consts<double>::q_lg2p;
-					else
-						rsup*=filib_consts<double>::q_lg2m;
-				}
-  
-					if (E && fp_traits<double,K>::IsNaN(rinf))
-						rinf = fp_traits<double,K>::ninfinity();
-					if (E && fp_traits<double,K>::IsNaN(rsup))
-						rsup = fp_traits<double,K>::infinity();
+				if (E && fp_traits<double,K>::IsNaN(rinf))
+					rinf = fp_traits<double,K>::ninfinity();
+				if (E && fp_traits<double,K>::IsNaN(rsup))
+					rsup = fp_traits<double,K>::infinity();
 		}
 
 		return interval<double,K,E>(rinf,rsup);
